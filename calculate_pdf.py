import json
from diffpy.srreal.pdfcalculator import PDFCalculator
from diffpy.structure.parsers import getParser
from matplotlib import pyplot as plt
from pymatgen.core import Structure
import numpy as np
import os
import time


def get_pdf(structure_dict, element, u=0.007, rmax=10.0, qmax=30.0):
    """Compute PDF g(r) from the structure dict readable by pymatgen.

    Parameters
    ----------
    structure_dict: dict
        The crystal structure information stored in a dict.
    element: str
        Element used to calculated dPDF
    rmax: float
        The upper limit of interatomic distance r,
        default=10 A (rmin=0)
    u: float
        The value of Uisoequiv, atomic displacement parameter,
        default = 0.007
    qmax: float
        The upper limit of wavenumber q,
        default=30 (A-1)


    --------
    x_pdf: array_like.
        PDF generated by X-ray. r and g(r)
    n_pdf: array_like.
        PDF generated by Neutron. r and g(r)
    diff_x_pdf: array_like.
        differential PDF generated by X-ray. r and g(r)
    diff_n_pdf: array_like.
        differential PDF generated by Neutron. r and g(r)
    """
    structure_pymatgen = Structure.from_dict(structure_dict)  # get from dict
    structure_cif = structure_pymatgen.to(fmt="cif")  # dict to cif
    parser = getParser(format="cif")
    structure_diffpy = parser.parse(structure_cif)  # cif to diffpy.structure
    structure_diffpy.Uisoequiv = u  # set the isotropic thermal parameter

    xray_pdf_calculator = PDFCalculator(rmax=rmax, qmax=qmax)
    x_pdf = xray_pdf_calculator(structure_diffpy)
    diff_x_pdf_calculator = PDFCalculator(rmax=rmax, qmax=qmax)
    diff_x_pdf_calculator.setTypeMask(element, "all", False)
    diff_x_pdf = diff_x_pdf_calculator(structure_diffpy)
    diff_x_pdf = [x_pdf[0], list(np.array(x_pdf[1]) - np.array(diff_x_pdf[1]))]  # r, pdf

    neutron_pdf_calculator = PDFCalculator(rmax=rmax, qmax=qmax)
    neutron_pdf_calculator.scatteringfactortable = "neutron"
    n_pdf = neutron_pdf_calculator(structure_diffpy)
    diff_n_pdf_calculator = PDFCalculator(rmax=rmax, qmax=qmax)
    diff_n_pdf_calculator.setTypeMask(element, "all", False)
    diff_n_pdf_calculator.scatteringfactortable = "neutron"
    diff_n_pdf = diff_n_pdf_calculator(structure_diffpy)
    diff_n_pdf = [n_pdf[0], list(np.array(n_pdf[1]) - np.array(diff_n_pdf[1]))]  # r, pdf
    return x_pdf, n_pdf, diff_x_pdf, diff_n_pdf


def sample_pdf(pdf, offset=0, force_length=None, qmax=30, rmax=10, verbose=False):
    """Sample the PDF to expected length.

    Expected length is calculated according to Nyquist-Shannon grid
    qmax * (rmax - rmin) / pi

    Parameters
    ---------
    pdf: list
        Two array indicating the r and g(r) of PDF
    offset: int
        The deviation from the expected length.
    """
    input_length = len(pdf[0])
    expected_length = int(np.ceil(qmax * rmax / np.pi) + 1)
    expected_length_round = (
        expected_length // 10 - expected_length // 100 * 10 + 1
    ) * 10 + expected_length // 100 * 100  # rounded by 10
    length = expected_length_round + offset

    if force_length:
        length = force_length

    if verbose:
        print(
            f"Orignial PDF length: {input_length},\n"
            f"Sampled PDF length: {expected_length_round},\n"
            f"Use PDF length: {length}"
        )

    x_new = np.linspace(pdf[0][0], pdf[0][-1], length)
    pdf_new = np.interp(x_new, pdf[0], pdf[1], left=0, right=0)
    return list(x_new), list(pdf_new)


def add_pdf_to_datasets(
    load_name, save_name, element, force_length=100, u=0.007, rmax=10.0, qmax=30.0
):
    """Add x_pdf, n_pdf, diff_x_pdf, diff_n_pdf to the constructed datasets.

    Parameters
    ----------
    load_name: str
        name of the json file to load.
    save_name: str
        name of the json file to dump.
    element: str
        name of the element of the structure.
    force_length: int
        length of the PDF data.
    """
    names = ["x_pdf", "n_pdf", "diff_x_pdf", "diff_n_pdf"]

    with open(load_name, "r") as f:
        docs = json.load(f)

    for doc in docs:
        #        print(doc['formula_pretty'])
        #        print(doc['my_coordination_number'])
        try:
            pdfs = get_pdf(doc["structure"], element=element, u=u, rmax=rmax, qmax=qmax)
        except ValueError:
            for i in range(len(names)):
                doc[names[i]] = None  # None for features for which pdf can't be computed
            continue

        for i in range(len(pdfs)):
            if i == 0:
                r, gr = sample_pdf(
                    pdfs[i], force_length=force_length, qmax=qmax, rmax=rmax
                )
            else:
                _, gr = sample_pdf(
                    pdfs[i], force_length=force_length, qmax=qmax, rmax=rmax
                )
            doc[names[i]] = gr

    with open(save_name, "w") as f:
        json.dump(docs, f, indent=4)


if __name__ == "__main__":

    elements = ["Ti", "Fe", "Mn", "Cu"]
    file_names = [
        element + "_collection.json" for element in elements
    ]  # filename or path to the collection

    example_dir = "example_datasets"
    example_path = [
        os.path.join(example_dir, file_names[i]) for i in range(len(file_names))
    ]

    dump_dir = "datasets"
    dump_path = [os.path.join(dump_dir, file_names[i]) for i in range(len(file_names))]

    for i in range(len(elements)):
        start = time.time()
        add_pdf_to_datasets(
            example_path[i], dump_path[i], element=elements[i], force_length=200
        )
        end = time.time()
        print("iter {} finished. Cost {} seconds".format(i, end - start))
